class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n=grid.size();
        int m=grid[0].size();
        int vis[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                vis[i][j]=0;
            }
            
        }
        queue<pair<pair<int,int>,int>>q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                    
                }
            }
        }
        
        int tm=0;
        while(!q.empty()){
            int r=q.front().first.first;
            int c=q.front().first.second;
            int t=q.front().second;
            tm=max(tm,t);
            q.pop();
            int delrow[]={1,-1,0,0};
            int delcol[]={0,0,1,-1};
            for(int i=0;i<4;i++){
                int nr=r+delrow[i];
                int nc=c+delcol[i];
                if(nr<n&&nc<m&&nr>=0&&nc>=0&&vis[nr][nc]==0&&grid[nr][nc]==1){
                    vis[nr][nc]=1;
                    grid[nr][nc]=2;
                    q.push({{nr,nc},t+1});
                }
            }
            
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
               if(grid[i][j]==1){
                   return -1;
               }
            }
            
        }
        
        
        return tm;
    }
};
